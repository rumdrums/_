#!/usr/bin/env python

class BrickStash:
  def __init__(self, num_bricks):
    self.num_bricks = num_bricks
    self.staircases = []
    self.get_combos(self.num_bricks)

  def get_combos(self, lval, depth=1, carried=None, rval=0):
    print("brand new iteration: %d" % depth)
    if carried is None:
      carried = []
    if rval == 0:
      lval -= 1
      rval += 1
    carried.sort()
    staircase = set([lval] + [rval] + carried)
    get_combos(lval-1, depth+1, rval+1,  
    print("num: %d, lval: %s, rval: %s, carried: %s, depth: %d" % (self.num_bricks, lval, rval, carried, depth))
    while lval > rval:
      print("num: %d, lval: %s, rval: %s, carried: %s, depth: %d" % (self.num_bricks, lval, rval, carried, depth))
      if lval in carried or rval in carried:
        print("duplicate_numbers: %d" % depth)
        return self.get_combos(lval-1, depth+1, carried, rval+1)
      if staircase in self.staircases:
        print("duplicate_staircase: %d" % depth)
        return self.get_combos(lval-1, depth+1, carried, rval+1)
      self.staircases.append(staircase)
      print("success: %d" % depth)
      self.get_combos(lval, depth+1, to_carry)
      lval -= 1
      rval += 1

def answer(n):
 results = BrickStash(n)
 return len(results.staircases)

for i in range(3,15):
  answer(i)
