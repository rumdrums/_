#!/usr/bin/env python

# 3 001 000 000 000 000 000 000 000 000 1
# 4 001 000 000 000 000 000 000 000 000 1
# 5 002 000 000 000 000 000 000 000 000 2
# 6 002 001 000 000 000 000 000 000 000 3
# 7 003 001 000 000 000 000 000 000 000 4
# 8 003 002 000 000 000 000 000 000 000 5
# 9 004 003 000 000 000 000 000 000 000 7
# 10 004 004 001 000 000 000 000 000 000 9
# 11 005 005 001 000 000 000 000 000 000 11
# 12 005 007 002 000 000 000 000 000 000 14
# 13 006 008 003 000 000 000 000 000 000 17
# 14 006 010 005 000 000 000 000 000 000 21
# 15 007 012 006 001 000 000 000 000 000 26
# 16 007 014 009 001 000 000 000 000 000 31
# 17 008 016 011 002 000 000 000 000 000 37
# 18 008 019 015 003 000 000 000 000 000 45
# 19 009 021 018 005 000 000 000 000 000 53
# 20 009 024 023 007 000 000 000 000 000 63
# 21 010 027 027 010 001 000 000 000 000 75
# 22 010 030 034 013 001 000 000 000 000 88
# 23 011 033 039 018 002 000 000 000 000 103
# 24 011 037 047 023 003 000 000 000 000 121
# 25 012 040 054 030 005 000 000 000 000 141
# 26 012 044 064 037 007 000 000 000 000 164
# 27 013 048 072 047 011 000 000 000 000 191
# 28 013 052 084 057 014 001 000 000 000 221
# 29 014 056 094 070 020 001 000 000 000 255
# 30 014 061 108 084 026 002 000 000 000 295
# 31 015 065 120 101 035 003 000 000 000 339
# 32 015 070 136 119 044 005 000 000 000 389
# 33 016 075 150 141 058 007 000 000 000 447
# 34 016 080 169 164 071 011 000 000 000 511
# 35 017 085 185 192 090 015 000 000 000 584
# 36 017 091 206 221 110 021 001 000 000 667
# 37 018 096 225 255 136 028 001 000 000 759
# 38 018 102 249 291 163 038 002 000 000 863
# 39 019 108 270 333 199 049 003 000 000 981
# 40 019 114 297 377 235 065 005 000 000 1112
# 41 020 120 321 427 282 082 007 000 000 1259
# 42 020 127 351 480 331 105 011 000 000 1425
# 43 021 133 378 540 391 131 015 000 000 1609
# 44 021 140 411 603 454 164 022 000 000 1815
# 45 022 147 441 674 532 201 029 001 000 2047
# 46 022 154 478 748 612 248 040 001 000 2303
# 47 023 161 511 831 709 300 052 002 000 2589
# 48 023 169 551 918 811 364 070 003 000 2909
# 49 024 176 588 1014 931 436 089 005 000 3263
# 50 024 184 632 1115 1057 522 116 007 000 3657
# 51 025 192 672 1226 1206 618 146 011 000 4096
# 52 025 200 720 1342 1360 733 186 015 000 4581
# 53 026 208 764 1469 1540 860 230 022 000 5119
# 54 026 217 816 1602 1729 1009 288 030 000 5717
# 55 027 225 864 1747 1945 1175 352 041 001 6377
# 56 027 234 920 1898 2172 1367 434 054 001 7107
# 57 028 243 972 2062 2432 1579 525 073 002 7916
# 58 028 252 1033 2233 2702 1824 638 094 003 8807
# 59 029 261 1089 2418 3009 2093 764 123 005 9791
# 60 029 271 1154 2611 3331 2400 919 157 007 10879
# 61 030 280 1215 2818 3692 2738 1090 201 011 12075
# 62 030 290 1285 3034 4070 3120 1297 252 015 13393
# 63 031 300 1350 3266 4494 3539 1527 318 022 14847
# 64 031 310 1425 3507 4935 4011 1801 393 030 16443
# 65 032 320 1495 3765 5427 4526 2104 488 042 18199
# 66 032 331 1575 4033 5942 5102 2462 598 055 20131
# 67 033 341 1650 4319 6510 5731 2857 732 075 22249
# 68 033 352 1735 4616 7104 6430 3319 887 097 24575
# 69 034 363 1815 4932 7760 7190 3828 1076 128 27129
# 70 034 374 1906 5260 8442 8033 4417 1291 164 29926
# 71 035 385 1991 5608 9192 8946 5066 1549 212 32991
# 72 035 397 2087 5969 9975 9953 5812 1845 267 36351
# 73 036 408 2178 6351 10829 11044 6630 2194 340 40025
# 74 036 420 2280 6747 11720 12241 7564 2592 423 44045
# 75 037 432 2376 7166 12692 13534 8588 3060 530 48445
# 76 037 444 2484 7599 13702 14950 9749 3589 653 53249
# 77 038 456 2586 8056 14800 16475 11018 4206 807 58498
# 78 038 469 2700 8529 15944 18138 12450 4904 984 64233
# 79 039 481 2808 9027 17180 19928 14012 5708 1204 70487
# 80 039 494 2928 9542 18467 21873 15765 6615 1455 77311
# 81 040 507 3042 10083 19858 23961 17674 7657 1761 84755
# 82 040 520 3169 10642 21301 26226 19805 8824 2112 92863

# 1 - 
# 2 - 
# 3 - [2,1]
# 4 - [3,1]
# 5 - [4,1], [3,2]
# 6 - [3,2,1], [5,1], [4,2]
# 7 - [4,2,1], [6,1], [5,2], [4,3] 
# 8 - [5,2,1], [4,3,1], [7,1], [6,2], [5,3] 
# 9 - [6,2,1], [5,3,1], [4,3,2], [8,1], [7,2], [6,3], [5,4]

# 50 - 9-# combos:
[1, 2, 3, 4, 5, 6, 7, 8, 14]
[1, 2, 3, 4, 5, 6, 7, 9, 13]
[1, 2, 3, 4, 5, 6, 7, 10, 12]
[1, 2, 3, 4, 5, 6, 8, 9, 12]
[1, 2, 3, 4, 5, 6, 8, 10, 11]
[1, 2, 3, 4, 5, 7, 8, 9, 11]
[1, 2, 3, 4, 6, 7, 8, 9, 10]

def get_largest(n):
  i = 0
  total = 0
  while total <= n:
    # print("i: %d, total: %d" % (i, total))
    i += 1
    total += i
  return i-1


def get_initial_array(n, total):
  if n > get_largest(total):
    return -1
  arr = []
  [ arr.append(i) for i in range(1,n) ]
  arr.append(total - (sum(arr)))
  arr.reverse()
  return arr

def get_combos(arr, results = [], idx = 0, depth = 1 ):
  print(arr, depth)
  while arr[idx] > arr[idx+1] + 2:
    results.append(arr[:])
    arr[idx] -= 1
    arr[idx+1] += 1
    arr.sort(reverse=True)
    get_combos(arr, results, idx+1, depth+1)
  if arr[idx] > arr[idx+1]:
    results.append(arr[:])
    





def get_largest(n):
  i = 0
  total = 0
  while total <= n:
    # print("i: %d, total: %d" % (i, total))
    i += 1
    total += i
  return i-1


def answer(n):
  total = get_largest(n)
  print("n: %02d, total: %02d" % (n, total))


#for i in range(201):
#  answer(i)


arr = get_initial_array(9, 50)
results = []
get_combos(arr, results )
