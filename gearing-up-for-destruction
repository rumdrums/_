As Commander Lambda's personal assistant, you've been assigned the task of configuring the LAMBCHOP doomsday device's axial orientation 
gears. It should be pretty simple - just add gears to create the appropriate rotation ratio. But the problem is, due to the layout of the LAMBCHOP 
and the complicated system of beams and pipes supporting it, the pegs that will support the gears are fixed in place.

The LAMBCHOP's engineers have given you lists identifying the placement of groups of pegs along various support beams. You need to place a gear 
on each peg (otherwise the gears will collide with unoccupied pegs). The engineers have plenty of gears in all different sizes stocked up, so you 
can choose gears of any size, from a radius of 1 on up. Your goal is to build a system where the last gear rotates at twice the rate (in 
revolutions per minute, or rpm) of the first gear, no matter the direction. Each gear (except the last) touches and turns the gear on the next peg 
to the right.

Given a list of distinct positive integers named pegs representing the location of each peg along the support beam, write a function answer(pegs) 
which, if there is a solution, returns a list of two positive integers a and b representing the numerator and denominator of the first gear's 
radius in its simplest form in order to achieve the goal above, such that radius = a/b. The ratio a/b should be greater than or equal to 1. Not all 
support configurations will necessarily be capable of creating the proper rotation ratio, so if the task is impossible, the function answer(pegs) 
should return the list [-1, -1].

For example, if the pegs are placed at [4, 30, 50], then the first gear could have a radius of 12, the second gear could have a radius of 14, and 
the last one a radius of 6. Thus, the last gear would rotate twice as fast as the first one. In this case, pegs would be [4, 30, 50] and 
answer(pegs) should return [12, 1].

The list pegs will be given sorted in ascending order and will contain at least 2 and no more than 20 distinct positive integers, all between 1 and 
10000 inclusive.

Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit solution.java

Test cases
==========

Inputs:
    (int list) pegs = [4, 30, 50]
Output:
    (int list) [12, 1]

Inputs:
    (int list) pegs = [4, 17, 50]
Output:
    (int list) [-1, -1]
misses = []

class Peg:
  first_peg = None
  last_peg = None
  def __init__(self, idx, pegs):
    self.peg = pegs[idx]
    self.pegs = pegs
    self.denom = None
    self.numer = None
    self.ldiff = None
    self.rdiff = None
    if idx == 0:
      Peg.first_peg = self
      self.rdiff = pegs[1] - self.peg
      self.max_radius = self.rdiff - 1
    elif idx == len(pegs) - 1:
      Peg.last_peg = self
      self.ldiff = self.peg - pegs[-2]
      self.max_radius = self.ldiff - 1
    else:
      self.ldiff = self.peg - pegs[idx-1]
      self.rdiff = pegs[idx+1] - self.peg
      self.max_radius = min( self.rdiff, self.ldiff ) - 1
    # FIXME -- how determine this algorithmically:
    self.max_denom = 5
  def __str__(self):
    return "peg: %s, numer: %s, denom: %s" % (self.peg, self.numer, self.denom)
  @classmethod
  def is_correct_ratio(cls):
    if Peg.first_peg.denom == Peg.last_peg.denom:
      if Peg.first_peg.numer == Peg.last_peg.numer * 2:
        return True
    return False
  @classmethod
  def is_valid_radius(cls, cur_val):
    if cur_val in misses:
      return False
    if cur_val < 2 or cur_val > 2*Peg.last_peg.max_radius:
      misses.append(cur_val)
      return False
    return True


def init(pegs):
  new_pegs = []
  for idx, val in enumerate(pegs):
    new_pegs.append(Peg(idx, pegs))
  return new_pegs


def test_radii(pegs):
  pegs[1].denom = pegs[0].denom  
  pegs[1].numer = (pegs[1].ldiff * pegs[1].denom) - pegs[0].numer
  if float(pegs[1].numer)/pegs[1].denom > pegs[1].max_radius:
    return False
  # last call:
  if len(pegs) == 2:
    return Peg.is_correct_ratio()
  # recurse:
  return test_radii(pegs[1:])
    

def results(pegs):
  denom = 1
  while denom <= Peg.first_peg.max_denom:
    print("denom: %s" % denom)
    numer = denom
    cur_val = float(numer)/denom
    while cur_val <= Peg.first_peg.max_radius:
      if not Peg.is_valid_radius(cur_val):
        numer += 1
        cur_val = float(numer)/denom
        continue
      Peg.first_peg.numer = numer
      Peg.first_peg.denom = denom
      success = test_radii(pegs)
      if success:
        for i in pegs:
          print(i)
        return (numer, denom)
      numer += 1
      cur_val = float(numer)/denom
    denom += 1
  return (-1, -1)


def answer(pegs):
  global misses
  misses = []
  pegs = init(pegs)
  return results(pegs)


print(answer([4,30]))
print(answer([4,30,50]))
print(answer([400,3000,5000]))
print(answer([10, 27, 80, 100, 189, 250, 300, 400, 480, 500, 600, 750, 800, 900]))
print(answer([9900, 9950, 9951, 9952, 9953, 9954, 9955, 9956, 9957, 9999]))
print(misses)

